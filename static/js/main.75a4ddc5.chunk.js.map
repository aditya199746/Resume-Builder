{"version":3,"sources":["AppContext.js","constants/questionsArray.js","components/Question.jsx","components/Resume.jsx","components/Questions.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","React","createContext","questionsArray","question","resumeField","resumeFieldId","useStyles","makeStyles","theme","buttonContainer","display","marginTop","button","background","Question","classes","value","useContext","questionAnswer","state","function","handleChangeInput","nextQuestion","noValidate","autoComplete","onSubmit","TextField","id","label","name","answer","onChange","className","Button","type","variant","color","endIcon","ArrowRight","buttonBuildNew","cursor","minWidth","textAlign","border","padding","boxShadow","buttonDownload","resume","marginBottom","margin","refreshPage","window","location","reload","Resume","ref","createRef","answers","map","style","justifyContent","onClick","targetRef","filename","toPdf","root","alignItems","minHeight","progressBar","height","LinearProgressWithLabel","props","Box","width","mr","LinearProgress","Typography","Math","round","Questions","useState","progress","setProgress","questions","useEffect","length","App","setQuestions","setAnswers","setQuestionAnswer","Provider","e","target","preventDefault","qa","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75a4ddc5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;\r\n","let questionsArray = [\r\n  {\r\n    question: \"What is your name?\",\r\n    resumeField: \"Name\",\r\n    resumeFieldId: \"name\",\r\n  },\r\n  {\r\n    question: \"Email address\",\r\n    resumeField: \"Email\",\r\n    resumeFieldId: \"email\",\r\n  },\r\n  {\r\n    question: \"Phone number\",\r\n    resumeField: \"Phone Number\",\r\n    resumeFieldId: \"phoneNumber\",\r\n  },\r\n  {\r\n    question: \"Enter your address\",\r\n    resumeField: \"Adress\",\r\n    resumeFieldId: \"address\",\r\n  },\r\n  {\r\n    question: \"What is your career objective\",\r\n    resumeField: \"Career Objective\",\r\n    resumeFieldId: \"objective\",\r\n  },\r\n  {\r\n    question: \"What are your skills and abilities\",\r\n    resumeField: \"Skills\",\r\n    resumeFieldId: \"skills\",\r\n  },\r\n  {\r\n    question: \"Work experience\",\r\n    resumeField: \"Work Experience\",\r\n    resumeFieldId: \"experience\",\r\n  },\r\n  {\r\n    question: \"Education\",\r\n    resumeField: \"Educational Qualifications\",\r\n    resumeFieldId: \"education\",\r\n  },\r\n];\r\nexport default questionsArray;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppContext from \"../AppContext\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  buttonContainer: {\r\n    display: \"block\",\r\n    marginTop: \"1rem\",\r\n  },\r\n  button: {\r\n    background: \"white\",\r\n  },\r\n}));\r\n\r\nfunction Question() {\r\n  const classes = useStyles();\r\n  const value = useContext(AppContext);\r\n\r\n  let { questionAnswer } = value.state;\r\n  let { handleChangeInput, nextQuestion } = value.function;\r\n  return (\r\n    <div>\r\n      <form noValidate autoComplete=\"on\" onSubmit={nextQuestion}>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label={questionAnswer.question}\r\n          name={questionAnswer.resumeFieldId}\r\n          value={questionAnswer.answer ? questionAnswer.answer : \"\"}\r\n          onChange={handleChangeInput}\r\n        />\r\n        <div className={classes.buttonContainer}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            className={classes.button}\r\n            endIcon={<ArrowRight />}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default Question;\r\n","import React, { createRef, useContext } from \"react\";\r\nimport Pdf from \"react-to-pdf\";\r\nimport AppContext from \"../AppContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  buttonBuildNew: {\r\n    cursor: \"pointer\",\r\n    minWidth: \"7rem\",\r\n    textAlign: \"center\",\r\n    border: \"none\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0 1px 1px 0 rgb(0 0 0 / 20%), 0 1px 2px 0 rgb(0 0 0 / 19%)\",\r\n    \"&:hover\": {\r\n      background: \"#d6d6d6\",\r\n    },\r\n  },\r\n  buttonDownload: {\r\n    cursor: \"pointer\",\r\n    minWidth: \"7rem\",\r\n    textAlign: \"center\",\r\n    border: \"none\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0 1px 1px 0 rgb(0 0 0 / 20%), 0 1px 2px 0 rgb(0 0 0 / 19%)\",\r\n    background: \"#77bb77\",\r\n    \"&:hover\": {\r\n      background: \"#548854\",\r\n    },\r\n  },\r\n  resume: {\r\n    padding: \"3rem\",\r\n    boxShadow: \"0 0.5rem 1rem 0 rgb(0 0 0 / 10%)\",\r\n    marginBottom: \"1rem\",\r\n    margin: \"1rem\",\r\n    marginTop: \"3rem\",\r\n  },\r\n}));\r\n\r\nlet refreshPage = () => {\r\n  window.location.reload();\r\n};\r\n\r\nfunction Resume() {\r\n  const ref = createRef();\r\n  const value = useContext(AppContext);\r\n  const classes = useStyles();\r\n\r\n  let { answers } = value.state;\r\n  return (\r\n    <div>\r\n      <div ref={ref} className={classes.resume}>\r\n        {answers.map((answer) => {\r\n          return (\r\n            <div>\r\n              {answer.resumeFieldId === \"name\" ||\r\n              answer.resumeFieldId === \"email\" ||\r\n              answer.resumeFieldId === \"address\" ||\r\n              answer.resumeFieldId === \"phoneNumber\" ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: \"right\",\r\n                  }}\r\n                >\r\n                  <label>{answer.answer}</label>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <h4>{answer.resumeField}</h4>\r\n                  <p>{answer.answer}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        <button className={classes.buttonBuildNew} onClick={refreshPage}>\r\n          Build New\r\n        </button>\r\n        <Pdf targetRef={ref} filename=\"code-example.pdf\">\r\n          {({ toPdf }) => (\r\n            <button onClick={toPdf} className={classes.buttonDownload}>\r\n              Download Resume\r\n            </button>\r\n          )}\r\n        </Pdf>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Resume;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { LinearProgress, Typography, Box } from \"@material-ui/core\";\r\nimport Question from \"./Question\";\r\nimport AppContext from \"../AppContext\";\r\nimport Resume from \"./Resume\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    minHeight: \"80vh\",\r\n  },\r\n  progressBar: {\r\n    margin: \"1rem\",\r\n  },\r\n  question: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"80vh\",\r\n  },\r\n  question: {},\r\n}));\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Questions() {\r\n  const classes = useStyles();\r\n\r\n  const [progress, setProgress] = React.useState(0);\r\n\r\n  const value = useContext(AppContext);\r\n  let { questionAnswer, questions, answers } = value.state;\r\n\r\n  useEffect(() => {\r\n    setProgress(\r\n      (answers.length / questions.length) * 100\r\n        ? (answers.length / questions.length) * 100\r\n        : 0\r\n    );\r\n  }, [answers]);\r\n\r\n  return (\r\n    <div>\r\n      {questions.length !== answers.length ? (\r\n        <LinearProgressWithLabel\r\n          value={progress}\r\n          className={classes.progressBar}\r\n        />\r\n      ) : null}\r\n      <div className={classes.root}>\r\n        {questions.length === answers.length ? (\r\n          <Resume />\r\n        ) : (\r\n          <div className={classes.question}>\r\n            <Question question={questionAnswer.question} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Questions;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AppContext from \"./AppContext\";\r\nimport questionsArray from \"./constants/questionsArray\";\r\nimport Questions from \"./components/Questions\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nfunction App() {\r\n  let [questions, setQuestions] = useState([]);\r\n  let [answers, setAnswers] = useState([]);\r\n  let [questionAnswer, setQuestionAnswer] = useState({});\r\n\r\n  useEffect(() => {\r\n    setQuestions(questionsArray);\r\n    setQuestionAnswer(questionsArray[0]);\r\n  }, []);\r\n\r\n  let handleChangeInput = (e) => {\r\n    setQuestionAnswer({\r\n      ...questionAnswer,\r\n      answer: e.target.value,\r\n    });\r\n  };\r\n\r\n  let nextQuestion = (e) => {\r\n    e.preventDefault();\r\n    questions.map((question) => {\r\n      if (question.resumeFieldId == questionAnswer.resumeFieldId) {\r\n        setAnswers([\r\n          ...answers,\r\n          { ...question, answer: questionAnswer.answer },\r\n        ]);\r\n      }\r\n    });\r\n\r\n    questions.map((qa, index) => {\r\n      if (index <= questions.length) {\r\n        if (qa.resumeFieldId === questionAnswer.resumeFieldId) {\r\n          setQuestionAnswer(questions[index + 1]);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        state: {\r\n          questionAnswer,\r\n          questions,\r\n          answers,\r\n        },\r\n        function: {\r\n          handleChangeInput: handleChangeInput,\r\n          nextQuestion: nextQuestion,\r\n        },\r\n      }}\r\n    >\r\n      <div className=\"App\">\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            textAlign: \"center\",\r\n            margin: \"2rem\",\r\n          }}\r\n        >\r\n          Resume Builder\r\n        </Typography>\r\n        <Questions />\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}